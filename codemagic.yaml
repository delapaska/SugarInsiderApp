workflows:
  react-native-ios:
    name: React Native iOS
    max_build_duration: 120
    instance_type: mac_mini_m2
    integrations:
      app_store_connect: SugarInsederApp
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.sugarinsiderapp.ivanchai
      vars:
        BUNDLE_ID: "com.sugarinsiderapp.ivanchai"
        XCODE_WORKSPACE: "SugarInsiderApp.xcworkspace"
        XCODE_SCHEME: "SugarInsiderApp"
        APP_STORE_APPLE_ID: 6753351573
        CM_CERTIFICATE: SugarInsiderApp
        CM_PROVISIONING_PROFILE: SugarInsiderApp
      node: latest
      xcode: latest
      cocoapods: default
    scripts:
      - name: Set up keychain
        script: keychain initialize

      - name: Install npm dependencies
        script: |
          npm install

      - name: Clear Metro cache
        script: |
          rm -rf node_modules/.cache
          rm -rf /tmp/metro-*
          rm -rf /tmp/haste-map-*

      - name: Create assets folder with app icons
        script: |
          echo "üîß Verifying and preparing ALL assets for bundling..."

          # Verify assets directory exists and contains all required icons
          if [ ! -d "assets" ]; then
            echo "‚ùå Assets directory not found!"
            exit 1
          fi

          # Count total assets
          TOTAL_ASSETS=$(find assets -name '*.png' -o -name '*.jpg' -o -name '*.jpeg' | wc -l)
          echo "üì¶ Found $TOTAL_ASSETS image assets in project"

          # List all asset directories for debugging
          echo "üìÅ Asset directory structure:"
          find assets -type d | sort

          # Verify key asset files exist
          REQUIRED_DIRS=("assets/Diary/Parts" "assets/Profile" "assets/Settings" "assets/Onboarding/Parts")
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ -d "$dir" ]; then
              ASSETS_COUNT=$(find "$dir" -name '*.png' | wc -l)
              echo "‚úÖ $dir: $ASSETS_COUNT assets"
            else
              echo "‚ùå Missing required directory: $dir"
              exit 1
            fi
          done

          # Ensure main app icon exists for Expo
          if [ -f "icon.png" ]; then
            # Copy main icon to assets if not already there
            if [ ! -f "assets/icon.png" ]; then
              cp icon.png assets/icon.png
              echo "‚úÖ Copied main icon to assets/icon.png"
            fi
            # Create splash and adaptive icons for Expo compatibility
            cp icon.png assets/splash.png 2>/dev/null || true
            cp icon.png assets/adaptive-icon.png 2>/dev/null || true
          else
            echo "‚ùå Main icon.png not found in project root!"
            exit 1
          fi

          echo "‚úÖ All assets verified and prepared for bundling"

          # Verify AssetHelper.js exists and contains asset registry
          if [ -f "AssetHelper.js" ]; then
            REGISTRY_ASSETS=$(grep -c "require('./" AssetHelper.js)
            echo "‚úÖ AssetHelper.js found with $REGISTRY_ASSETS registered assets"
          else
            echo "‚ùå AssetHelper.js not found - production asset loading may fail!"
            exit 1
          fi


      - name: Remove old iOS folder
        script: |
          rm -rf ios
          rm -rf android

      - name: Show version info
        script: |
          echo "üì± App version from app.json:"
          cat app.json | grep -A 5 '"version"'
          echo ""

      - name: Run Expo Prebuild
        script: |
          echo "üîß Running Expo prebuild with asset preservation..."
          npx expo prebuild --platform ios --clean

          echo "üìã Post-prebuild asset verification:"
          if [ -d "ios" ]; then
            echo "‚úÖ iOS directory created"
            ls -la ios/ | grep -E "(assets|\.app)" || echo "‚ÑπÔ∏è No assets or .app in ios/ yet"
          else
            echo "‚ùå iOS directory not created!"
          fi

      - name: Replace AppDelegate with custom version to fix 'No script URL provided' error
        script: |
          echo "üîß Replacing default AppDelegate.swift with custom version..."
          cp scripts/custom-appdelegate.swift ios/SugarInsiderApp/AppDelegate.swift
          echo "‚úÖ Custom AppDelegate.swift with emergency bundle logic has been installed!"
          echo "üîß This will prevent 'No script URL provided' errors in production .ipa"

      - name: Add main.jsbundle to Xcode project to ensure inclusion in .ipa
        script: |
          echo "üîß Adding main.jsbundle to Xcode project..."
          cd ios

          # Create placeholder bundle file in CORRECT location (ios root, not ios/SugarInsiderApp)
          touch main.jsbundle

          # Run Python script to add bundle to Xcode project
          python3 ../scripts/add-bundle-to-xcode.py

          echo "‚úÖ main.jsbundle added to Xcode project resources!"
          echo "üîß This ensures bundle will be included in final .ipa"

      - name: Fix NODE_BINARY path for Xcode build
        script: |
          # Update .xcode.env.local with correct NODE_BINARY for CI environment
          echo "export NODE_BINARY=$(which node)" > ios/.xcode.env.local
          echo "export RCT_NEW_ARCH_ENABLED=0" >> ios/.xcode.env.local
          echo "‚úÖ Updated .xcode.env.local with NODE_BINARY: $(which node)"

      - name: Add privacy permissions to Info.plist
        script: |
          PLIST=$CM_BUILD_DIR/ios/$XCODE_SCHEME/Info.plist
          PLIST_BUDDY=/usr/libexec/PlistBuddy

          # Add photo library usage description
          $PLIST_BUDDY -c "Add :NSPhotoLibraryUsageDescription string 'This app needs access to photo library to save and share your dietary records and reports.'" $PLIST || true

          # Add camera usage description
          $PLIST_BUDDY -c "Add :NSCameraUsageDescription string 'This app needs access to camera to capture photos of your meals for dietary tracking.'" $PLIST || true

          # Add photo library add usage description (for saving files)
          $PLIST_BUDDY -c "Add :NSPhotoLibraryAddUsageDescription string 'This app needs to save PDF reports and dietary data to your photo library.'" $PLIST || true

          # Add documents folder access (for PDF generation)
          $PLIST_BUDDY -c "Add :NSDocumentsFolderUsageDescription string 'This app needs access to documents folder to save PDF reports of your dietary data.'" $PLIST || true

          # Add file provider domain access
          $PLIST_BUDDY -c "Add :NSFileProviderDomainUsageDescription string 'This app needs to access file system to export and share dietary reports.'" $PLIST || true

          # Add encryption exemption for App Store
          $PLIST_BUDDY -c "Add :ITSAppUsesNonExemptEncryption bool false" $PLIST || true

          echo "‚úÖ Added all privacy permissions to Info.plist"

      - name: Patch react-native-iap podspec
        script: |
          RNIAP_PODSPEC=$(find node_modules -name "react-native-iap.podspec" -o -name "RNIap.podspec" | head -n 1)
          if [ -f "$RNIAP_PODSPEC" ]; then
            sed -i '' "/RCT-Folly/d" "$RNIAP_PODSPEC"
            echo "‚úÖ Patched $RNIAP_PODSPEC"
          fi

      - name: Patch Podfile
        script: |
          cd ios
          ruby -i -pe 'print "source '\''https://github.com/CocoaPods/Specs.git'\''\n\n" if $. == 1' Podfile


      - name: Install CocoaPods dependencies
        script: |
          cd ios
          pod install --repo-update

      - name: Fetch signing files from Codemagic
        script: |
          keychain add-certificates
          xcode-project use-profiles

      - name: Pre-build React Native bundle
        script: |
          export NODE_BINARY=$(which node)
          echo "üîß Pre-building React Native bundle with proper asset handling..."

          # Ensure bundle directory exists
          mkdir -p ios

          # Clear any existing bundle and Metro cache thoroughly
          rm -rf ios/main.jsbundle
          rm -rf ios/assets
          rm -rf node_modules/.cache
          rm -rf /tmp/metro-*
          rm -rf /tmp/haste-map-*
          rm -rf $TMPDIR/metro-* 2>/dev/null || true

          # CRITICAL: Ensure assets are available for bundling
          echo "üì¶ Ensuring assets are available for bundling process..."
          if [ -d "assets" ]; then
            TOTAL_ASSETS=$(find assets -name '*.png' -o -name '*.jpg' -o -name '*.jpeg' | wc -l)
            echo "‚úÖ Assets directory verified: $TOTAL_ASSETS files"
          else
            echo "‚ùå Assets directory missing! Bundle will fail."
            exit 1
          fi

          # Try multiple bundle creation methods with proper asset handling
          echo "üîÑ Attempting bundle creation with assets..."

          if npx react-native bundle \
            --platform ios \
            --dev false \
            --entry-file index.js \
            --bundle-output ios/main.jsbundle \
            --assets-dest ios \
            --reset-cache \
            --verbose; then
            echo "‚úÖ Bundle creation succeeded with react-native bundle"

            # Verify assets were copied
            if [ -d "ios/assets" ]; then
              COPIED_ASSETS=$(find ios/assets -name '*.png' | wc -l)
              echo "‚úÖ Assets copied to ios/: $COPIED_ASSETS files"
            else
              echo "‚ö†Ô∏è No assets directory created in ios/ - assets may be embedded in bundle"
            fi

          else
            echo "‚ùå react-native bundle failed, trying Metro bundler..."

            # Try with Metro bundler directly
            npx metro build \
              --platform ios \
              --dev false \
              --entry-file index.js \
              --bundle-output ios/main.jsbundle \
              --assets-dest ios \
              --reset-cache || {

              echo "‚ùå Metro build failed, trying manual approach..."

              # Try with Expo bundling (more reliable for assets)
              if command -v expo &> /dev/null; then
                echo "üîÑ Trying Expo export for better asset handling..."
                npx expo export --platform ios --output-dir ios/export --clear || {
                  echo "‚ùå All bundling methods failed!"
                  exit 1
                }

                # Move exported bundle to expected location
                if [ -f "ios/export/_expo/static/js/ios/index-*.js" ]; then
                  mv ios/export/_expo/static/js/ios/index-*.js ios/main.jsbundle
                  echo "‚úÖ Expo export succeeded"
                fi
              else
                echo "‚ùå All methods failed!"
                exit 1
              fi
            }
          fi

          echo "‚úÖ Bundle created successfully"
          ls -la ios/main.jsbundle

          # Verify bundle file is not empty and contains expected content
          BUNDLE_SIZE=$(stat -f%z ios/main.jsbundle)
          echo "üì¶ Bundle size: $BUNDLE_SIZE bytes"

          if [ $BUNDLE_SIZE -lt 1000 ]; then
            echo "‚ùå Bundle file too small! ($BUNDLE_SIZE bytes)"
            exit 1
          fi

          # Check if bundle contains app registration
          if grep -q "SugarInsiderApp" ios/main.jsbundle; then
            echo "‚úÖ Bundle contains app name - good!"
          else
            echo "‚ö†Ô∏è Bundle may not contain app registration"
          fi

          # Verify assets are available for final app
          echo "üìÅ Final asset verification after bundling:"
          if [ -d "ios/assets" ]; then
            ASSETS_COUNT=$(find ios/assets -name '*.png' | wc -l)
            echo "‚úÖ Assets in ios/assets: $ASSETS_COUNT files"
            echo "üìã Sample assets found:"
            find ios/assets -name '*.png' | head -10

            # Critical check: verify key UI assets exist
            KEY_ASSETS=("ios/assets/Diary/Parts/icecream.png" "ios/assets/Profile/Avatar.png" "ios/assets/Onboarding/Parts/logo.png")
            echo "üîç Checking critical UI assets:"
            for asset in "${KEY_ASSETS[@]}"; do
              if [ -f "$asset" ]; then
                echo "‚úÖ Found: $(basename $(dirname $asset))/$(basename $asset)"
              else
                echo "‚ùå MISSING: $(basename $(dirname $asset))/$(basename $asset)"
              fi
            done
          else
            echo "‚ùå CRITICAL: No ios/assets directory after bundling!"
            echo "üîç Checking what's in ios/:"
            ls -la ios/ | head -10

            echo "üö® EMERGENCY: Manually copying assets to ios/"
            if [ -d "assets" ]; then
              cp -r assets ios/
              echo "‚úÖ Emergency copy completed"
              echo "üìã Copied: $(find ios/assets -name '*.png' | wc -l) asset files"
            fi
          fi

          # Show first few lines of bundle for debugging
          echo "üìã Bundle content preview:"
          head -2 ios/main.jsbundle

      - name: Build ipa with xcode-project
        script: |
          export NODE_BINARY=$(which node)
          export SKIP_BUNDLING=1
          echo "üèóÔ∏è Building iOS app with pre-built bundle (SKIP_BUNDLING=1)..."

          # Build with SKIP_BUNDLING to avoid Metro serializer conflicts
          xcode-project build-ipa \
            --workspace "$CM_BUILD_DIR/ios/$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME" \
            --config "Release"

      - name: Ensure bundle and assets are properly included in .ipa
        script: |
          echo "üîß Ensuring bundle and ALL assets are in .ipa file..."

          # Find the built .app file in the archive
          APP_PATH=$(find build -name "*.app" -type d | head -n 1)

          if [ -z "$APP_PATH" ]; then
            echo "‚ùå Could not find .app file"
            exit 1
          fi

          echo "üì± App found at: $APP_PATH"

          # Copy bundle to app if missing
          if [ ! -f "$APP_PATH/main.jsbundle" ]; then
            echo "‚ö†Ô∏è Bundle not found in app, copying from source..."
            if [ -f "ios/main.jsbundle" ]; then
              cp "ios/main.jsbundle" "$APP_PATH/"
              echo "‚úÖ Bundle copied to app"
            else
              echo "‚ùå Source bundle not found!"
              exit 1
            fi
          else
            echo "‚úÖ Bundle already present in app"
          fi

          # CRITICAL: Ensure ALL assets are available in multiple locations
          echo "üì¶ Comprehensive asset copying to ensure inclusion..."

          # Method 1: Copy from ios/assets if exists
          if [ -d "ios/assets" ]; then
            if [ ! -d "$APP_PATH/assets" ]; then
              cp -r "ios/assets" "$APP_PATH/"
              echo "‚úÖ Assets copied to app from ios/assets"
            fi
            ASSETS_IN_IOS=$(find ios/assets -name '*.png' | wc -l)
            echo "üìã Assets in ios/assets: $ASSETS_IN_IOS files"
          fi

          # Method 2: Copy directly from project assets (fallback)
          if [ -d "assets" ]; then
            if [ ! -d "$APP_PATH/assets" ]; then
              cp -r "assets" "$APP_PATH/"
              echo "‚úÖ Assets copied to app from project root"
            else
              # Ensure all subdirectories are present
              for asset_dir in assets/*/; do
                if [ -d "$asset_dir" ]; then
                  dir_name=$(basename "$asset_dir")
                  if [ ! -d "$APP_PATH/assets/$dir_name" ]; then
                    cp -r "$asset_dir" "$APP_PATH/assets/"
                    echo "‚úÖ Copied missing asset directory: $dir_name"
                  fi
                fi
              done
            fi
            PROJECT_ASSETS=$(find assets -name '*.png' | wc -l)
            echo "üìã Total project assets: $PROJECT_ASSETS files"
          fi

          # Method 3: Ensure assets in SugarInsiderApp directory too
          if [ -d "assets" ]; then
            mkdir -p "ios/SugarInsiderApp"
            if [ ! -d "ios/SugarInsiderApp/assets" ]; then
              cp -r "assets" "ios/SugarInsiderApp/"
              echo "‚úÖ Assets copied to ios/SugarInsiderApp/ for Xcode resources"
            fi
          fi

          # Final verification of assets in .app
          if [ -d "$APP_PATH/assets" ]; then
            FINAL_ASSETS=$(find "$APP_PATH/assets" -name '*.png' | wc -l)
            echo "‚úÖ Assets in final .app: $FINAL_ASSETS files"

            # List key directories to verify structure
            echo "üìÅ Asset directories in final app:"
            find "$APP_PATH/assets" -type d | sort

            # Verify key asset files exist
            KEY_ASSETS=("$APP_PATH/assets/Diary/Parts/icecream.png" "$APP_PATH/assets/Profile/Avatar.png" "$APP_PATH/assets/Onboarding/Parts/logo.png")
            for asset in "${KEY_ASSETS[@]}"; do
              if [ -f "$asset" ]; then
                echo "‚úÖ Key asset verified: $(basename "$asset")"
              else
                echo "‚ö†Ô∏è Missing key asset: $(basename "$asset")"
              fi
            done
          else
            echo "‚ùå CRITICAL: Assets directory still missing from .app!"

            # Emergency asset copy
            echo "üö® Emergency: Copying assets directly to app bundle..."
            if [ -d "assets" ]; then
              cp -r "assets" "$APP_PATH/"
              echo "‚úÖ Emergency asset copy completed"
            else
              echo "‚ùå No assets directory found to copy!"
              exit 1
            fi
          fi

          # Verify final bundle in .app
          if [ -f "$APP_PATH/main.jsbundle" ]; then
            BUNDLE_SIZE=$(stat -f%z "$APP_PATH/main.jsbundle" 2>/dev/null || stat -c%s "$APP_PATH/main.jsbundle")
            echo "‚úÖ Final verification: Bundle in app (size: $BUNDLE_SIZE bytes)"
          else
            echo "‚ùå CRITICAL: Bundle still missing from .app!"
            exit 1
          fi

      - name: Verify bundle inclusion in FINAL .ipa
        script: |
          echo "üîç Checking if main.jsbundle is included in the FINAL exported .ipa..."

          # Extract and verify the EXPORTED .ipa
          IPA_PATH="build/ios/ipa/SugarInsiderApp.ipa"

          if [ ! -f "$IPA_PATH" ]; then
            echo "‚ùå .ipa file not found at $IPA_PATH"
            exit 1
          fi

          # Create temp directory and extract .ipa
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          unzip -q "$CM_BUILD_DIR/$IPA_PATH"

          # Find the .app in extracted .ipa
          APP_PATH=$(find . -name "*.app" -type d | head -n 1)

          if [ -z "$APP_PATH" ]; then
            echo "‚ùå Could not find .app in extracted .ipa"
            exit 1
          fi

          echo "üì± Found app in .ipa at: $APP_PATH"

          # Check if main.jsbundle exists in the FINAL .ipa
          if [ -f "$APP_PATH/main.jsbundle" ]; then
            BUNDLE_SIZE=$(stat -f%z "$APP_PATH/main.jsbundle" 2>/dev/null || stat -c%s "$APP_PATH/main.jsbundle")
            echo "‚úÖ main.jsbundle found in FINAL .ipa! Size: $BUNDLE_SIZE bytes"

            if [ $BUNDLE_SIZE -gt 100000 ]; then
              echo "‚úÖ Bundle size looks good - your REAL app will load!"
            else
              echo "‚ö†Ô∏è Bundle size seems small: $BUNDLE_SIZE bytes"
            fi

            # Show first line of bundle
            echo "üìã Bundle content (first line):"
            head -1 "$APP_PATH/main.jsbundle"

          else
            echo "‚ùå CRITICAL: main.jsbundle NOT found in final .ipa!"
            echo "üìã App contents in .ipa:"
            ls -la "$APP_PATH/" | head -10
            echo ""
            echo "üö® This means Emergency Bundle will be used instead of real app!"
            exit 1
          fi

          # Cleanup
          cd "$CM_BUILD_DIR"
          rm -rf "$TEMP_DIR"


    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log

    publishing:
      email:
        recipients:
          - delapaska12@yandex.ru
        notify:
          success: true
          failure: true
      app_store_connect:
        auth: integration
        submit_to_testflight: true