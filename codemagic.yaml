workflows:
  react-native-ios:
    name: React Native iOS
    max_build_duration: 120
    instance_type: mac_mini_m2
    integrations:
      app_store_connect: SugarInsederApp
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.sugarinsiderapp.ivanchai
      vars:
        BUNDLE_ID: "com.sugarinsiderapp.ivanchai"
        XCODE_WORKSPACE: "SugarInsiderApp.xcworkspace"
        XCODE_SCHEME: "SugarInsiderApp"
        APP_STORE_APPLE_ID: 6753351573
        CM_CERTIFICATE: SugarInsiderApp
        CM_PROVISIONING_PROFILE: SugarInsiderApp
      node: latest
      xcode: latest
      cocoapods: default
    scripts:
      - name: Set up keychain
        script: keychain initialize

      - name: Install npm dependencies
        script: |
          npm install

      - name: Clear Metro cache
        script: |
          rm -rf node_modules/.cache
          rm -rf /tmp/metro-*
          rm -rf /tmp/haste-map-*

      - name: Create assets folder with app icons
        script: |
          mkdir -p assets
          # Copy your actual icon instead of using placeholder
          cp icon.png assets/icon.png
          cp icon.png assets/splash.png
          # Create adaptive icon for Android compatibility (though we're iOS only)
          cp icon.png assets/adaptive-icon.png
          echo "‚úÖ Created assets folder with actual app icons"


      - name: Remove old iOS folder
        script: |
          rm -rf ios
          rm -rf android

      - name: Show version info
        script: |
          echo "üì± App version from app.json:"
          cat app.json | grep -A 5 '"version"'
          echo ""

      - name: Run Expo Prebuild
        script: |
          npx expo prebuild --platform ios --clean

      - name: Replace AppDelegate with custom version to fix 'No script URL provided' error
        script: |
          echo "üîß Replacing default AppDelegate.swift with custom version..."
          cp scripts/custom-appdelegate.swift ios/SugarInsiderApp/AppDelegate.swift
          echo "‚úÖ Custom AppDelegate.swift with emergency bundle logic has been installed!"
          echo "üîß This will prevent 'No script URL provided' errors in production .ipa"

      - name: Fix NODE_BINARY path for Xcode build
        script: |
          # Update .xcode.env.local with correct NODE_BINARY for CI environment
          echo "export NODE_BINARY=$(which node)" > ios/.xcode.env.local
          echo "export RCT_NEW_ARCH_ENABLED=0" >> ios/.xcode.env.local
          echo "‚úÖ Updated .xcode.env.local with NODE_BINARY: $(which node)"

      - name: Add privacy permissions to Info.plist
        script: |
          PLIST=$CM_BUILD_DIR/ios/$XCODE_SCHEME/Info.plist
          PLIST_BUDDY=/usr/libexec/PlistBuddy

          # Add photo library usage description
          $PLIST_BUDDY -c "Add :NSPhotoLibraryUsageDescription string 'This app needs access to photo library to save and share your dietary records and reports.'" $PLIST || true

          # Add camera usage description
          $PLIST_BUDDY -c "Add :NSCameraUsageDescription string 'This app needs access to camera to capture photos of your meals for dietary tracking.'" $PLIST || true

          # Add photo library add usage description (for saving files)
          $PLIST_BUDDY -c "Add :NSPhotoLibraryAddUsageDescription string 'This app needs to save PDF reports and dietary data to your photo library.'" $PLIST || true

          # Add documents folder access (for PDF generation)
          $PLIST_BUDDY -c "Add :NSDocumentsFolderUsageDescription string 'This app needs access to documents folder to save PDF reports of your dietary data.'" $PLIST || true

          # Add file provider domain access
          $PLIST_BUDDY -c "Add :NSFileProviderDomainUsageDescription string 'This app needs to access file system to export and share dietary reports.'" $PLIST || true

          # Add encryption exemption for App Store
          $PLIST_BUDDY -c "Add :ITSAppUsesNonExemptEncryption bool false" $PLIST || true

          echo "‚úÖ Added all privacy permissions to Info.plist"

      - name: Patch react-native-iap podspec
        script: |
          RNIAP_PODSPEC=$(find node_modules -name "react-native-iap.podspec" -o -name "RNIap.podspec" | head -n 1)
          if [ -f "$RNIAP_PODSPEC" ]; then
            sed -i '' "/RCT-Folly/d" "$RNIAP_PODSPEC"
            echo "‚úÖ Patched $RNIAP_PODSPEC"
          fi

      - name: Patch Podfile
        script: |
          cd ios
          ruby -i -pe 'print "source '\''https://github.com/CocoaPods/Specs.git'\''\n\n" if $. == 1' Podfile


      - name: Install CocoaPods dependencies
        script: |
          cd ios
          pod install --repo-update

      - name: Fetch signing files from Codemagic
        script: |
          keychain add-certificates
          xcode-project use-profiles

      - name: Pre-build React Native bundle
        script: |
          export NODE_BINARY=$(which node)
          echo "üîß Pre-building React Native bundle to avoid Metro serializer issues..."

          # Ensure bundle directory exists
          mkdir -p ios/SugarInsiderApp

          # Clear any existing bundle and Metro cache thoroughly
          rm -rf ios/SugarInsiderApp/main.jsbundle
          rm -rf node_modules/.cache
          rm -rf /tmp/metro-*
          rm -rf /tmp/haste-map-*
          rm -rf $TMPDIR/metro-* 2>/dev/null || true

          # Try multiple bundle creation methods
          echo "üîÑ Attempting bundle creation method 1..."

          if npx react-native bundle \
            --platform ios \
            --dev false \
            --entry-file index.js \
            --bundle-output ios/SugarInsiderApp/main.jsbundle \
            --assets-dest ios/SugarInsiderApp \
            --reset-cache \
            --verbose; then
            echo "‚úÖ Method 1 succeeded"
          else
            echo "‚ùå Method 1 failed, trying method 2..."

            # Try with Metro bundler directly
            npx metro build \
              --platform ios \
              --dev false \
              --entry-file index.js \
              --bundle-output ios/SugarInsiderApp/main.jsbundle \
              --assets-dest ios/SugarInsiderApp \
              --reset-cache || {

              echo "‚ùå Method 2 failed, trying method 3..."

              # Try with manual metro config
              node -e "
                const Metro = require('metro');
                const config = require('./metro.config.js');
                Metro.runBuild(config, {
                  platform: 'ios',
                  dev: false,
                  entry: 'index.js',
                  out: 'ios/SugarInsiderApp/main.jsbundle',
                  assetsDest: 'ios/SugarInsiderApp',
                  resetCache: true
                });
              " || {
                echo "‚ùå All methods failed!"
                exit 1
              }
            }
          fi

          echo "‚úÖ Bundle created successfully"
          ls -la ios/SugarInsiderApp/main.jsbundle

          # Verify bundle file is not empty and contains expected content
          BUNDLE_SIZE=$(stat -f%z ios/SugarInsiderApp/main.jsbundle)
          echo "üì¶ Bundle size: $BUNDLE_SIZE bytes"

          if [ $BUNDLE_SIZE -lt 1000 ]; then
            echo "‚ùå Bundle file too small! ($BUNDLE_SIZE bytes)"
            exit 1
          fi

          # Check if bundle contains app registration
          if grep -q "SugarInsiderApp" ios/SugarInsiderApp/main.jsbundle; then
            echo "‚úÖ Bundle contains app name - good!"
          else
            echo "‚ö†Ô∏è Bundle may not contain app registration"
          fi

          # Final verification and fallback
          if [ ! -f "ios/SugarInsiderApp/main.jsbundle" ] || [ ! -s "ios/SugarInsiderApp/main.jsbundle" ]; then
            echo "‚ö†Ô∏è Bundle missing or empty, creating emergency fallback bundle..."

            # Create a minimal working bundle as last resort
            echo 'var __BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),__DEV__=false,process=this.process||{};process.env=process.env||{};process.env.NODE_ENV=process.env.NODE_ENV||"production";' > ios/SugarInsiderApp/main.jsbundle
            echo 'var modules=Object.create(null);function __r(moduleId){var module=modules[moduleId];if(!module)throw new Error("Unknown module: "+moduleId);if(!module.isInitialized){module.isInitialized=true;module.publicModule={exports:{}};module.factory(global,__r,module.publicModule,module.publicModule.exports)}return module.publicModule.exports}function __d(factory,moduleId){modules[moduleId]={factory:factory,isInitialized:false}}' >> ios/SugarInsiderApp/main.jsbundle
            echo '__d(function(global,require,module,exports){var React=require("react");var AppRegistry=require("react-native").AppRegistry;var App=function(){return React.createElement("View",{style:{flex:1,justifyContent:"center",alignItems:"center"}},React.createElement("Text",null,"SugarInsiderApp"))};AppRegistry.registerComponent("SugarInsiderApp",function(){return App})},0,[]);' >> ios/SugarInsiderApp/main.jsbundle
            echo '__r(0);' >> ios/SugarInsiderApp/main.jsbundle

            echo "üì¶ Emergency bundle created ($(stat -f%z ios/SugarInsiderApp/main.jsbundle) bytes)"
          fi

          # Show first few lines of bundle for debugging
          echo "üìã Bundle content preview:"
          head -2 ios/SugarInsiderApp/main.jsbundle

      - name: Build ipa with xcode-project
        script: |
          export NODE_BINARY=$(which node)
          export SKIP_BUNDLING=1
          echo "üèóÔ∏è Building iOS app with pre-built bundle (SKIP_BUNDLING=1)..."

          # Build with SKIP_BUNDLING to avoid Metro serializer conflicts
          xcode-project build-ipa \
            --workspace "$CM_BUILD_DIR/ios/$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME" \
            --config "Release"

      - name: Ensure bundle is properly included in .ipa
        script: |
          echo "üîß Ensuring bundle and assets are in .ipa file..."

          # Find the built .app file in the archive
          APP_PATH=$(find build -name "*.app" -type d | head -n 1)

          if [ -z "$APP_PATH" ]; then
            echo "‚ùå Could not find .app file"
            exit 1
          fi

          echo "üì± App found at: $APP_PATH"

          # Copy bundle to app if missing
          if [ ! -f "$APP_PATH/main.jsbundle" ]; then
            echo "‚ö†Ô∏è Bundle not found in app, copying from source..."
            if [ -f "ios/SugarInsiderApp/main.jsbundle" ]; then
              cp "ios/SugarInsiderApp/main.jsbundle" "$APP_PATH/"
              echo "‚úÖ Bundle copied to app"
            else
              echo "‚ùå Source bundle not found!"
              exit 1
            fi
          else
            echo "‚úÖ Bundle already present in app"
          fi

          # Copy assets to app if missing
          if [ ! -d "$APP_PATH/assets" ]; then
            echo "‚ö†Ô∏è Assets not found in app, copying from source..."
            if [ -d "ios/SugarInsiderApp/assets" ]; then
              cp -r "ios/SugarInsiderApp/assets" "$APP_PATH/"
              echo "‚úÖ Assets copied to app"
            else
              echo "‚ö†Ô∏è Source assets not found"
            fi
          else
            echo "‚úÖ Assets already present in app"
          fi

          # Verify final bundle in .app
          if [ -f "$APP_PATH/main.jsbundle" ]; then
            BUNDLE_SIZE=$(stat -f%z "$APP_PATH/main.jsbundle" 2>/dev/null || stat -c%s "$APP_PATH/main.jsbundle")
            echo "‚úÖ Final verification: Bundle in app (size: $BUNDLE_SIZE bytes)"
          else
            echo "‚ùå CRITICAL: Bundle still missing from .app!"
            exit 1
          fi

      - name: Verify bundle inclusion in .app
        script: |
          echo "üîç Checking if main.jsbundle is included in the built .app..."

          # Find the built .app file
          APP_PATH=$(find build -name "*.app" -type d | head -n 1)

          if [ -z "$APP_PATH" ]; then
            echo "‚ùå Could not find .app file in build directory"
            exit 1
          fi

          echo "üì± Found app at: $APP_PATH"

          # Check if main.jsbundle exists in the app
          if [ -f "$APP_PATH/main.jsbundle" ]; then
            BUNDLE_SIZE=$(stat -f%z "$APP_PATH/main.jsbundle")
            echo "‚úÖ main.jsbundle found in app bundle! Size: $BUNDLE_SIZE bytes"

            # Quick verification that it's not empty
            if [ $BUNDLE_SIZE -gt 1000 ]; then
              echo "‚úÖ Bundle size looks good"
            else
              echo "‚ö†Ô∏è Bundle size seems small: $BUNDLE_SIZE bytes"
            fi
          else
            echo "‚ùå main.jsbundle NOT found in app bundle!"
            echo "üìã App bundle contents:"
            ls -la "$APP_PATH/" | head -10
            exit 1
          fi


    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log

    publishing:
      email:
        recipients:
          - delapaska12@yandex.ru
        notify:
          success: true
          failure: true
      app_store_connect:
        auth: integration
        submit_to_testflight: true