import Foundation
import StoreKit
import SwiftUI

@MainActor
@available(iOS 15.0, *)
class MythicStrikePurchaseManager: ObservableObject {
    static let shared = MythicStrikePurchaseManager()
    
    @Published var products: [Product] = []
    @Published var purchasedLevels: Set<Int> = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π 3 –∏ 4
    private let productIdentifiers = [
        "com.Bubka.mythicstrike.level3",
        "com.Bubka.mythicstrike.level4"
    ]
    
    private init() {
        Task {
            await loadProducts()
            await loadPurchasedLevels()
        }
    }
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    
    func loadProducts() async {
        isLoading = true
        errorMessage = nil
        
        do {
            let storeProducts = try await Product.products(for: productIdentifiers)
            self.products = storeProducts.sorted { $0.id < $1.id }
            print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: \(products.map { $0.displayName })")
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: \(error.localizedDescription)"
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: \(error)")
        }
        
        isLoading = false
    }
    
    // MARK: - –ü–æ–∫—É–ø–∫–∞ —É—Ä–æ–≤–Ω–µ–π
    
    func purchaseLevel(_ level: Int) async -> Bool {
        guard let product = products.first(where: { $0.id == getProductId(for: level) }) else {
            errorMessage = "–ü—Ä–æ–¥—É–∫—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è \(level) –Ω–µ –Ω–∞–π–¥–µ–Ω"
            return false
        }
        
        do {
            let result = try await product.purchase()
            
            switch result {
            case .success(let verification):
                let transaction = try checkVerified(verification)
                await transaction.finish()
                
                // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –∫—É–ø–ª–µ–Ω–Ω—ã–µ
                await MainActor.run {
                    purchasedLevels.insert(level)
                    savePurchasedLevels()
                }
                
                print("‚úÖ –£—Ä–æ–≤–µ–Ω—å \(level) —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!")
                return true
                
            case .userCancelled:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∫—É–ø–∫—É —É—Ä–æ–≤–Ω—è \(level)")
                return false
                
            case .pending:
                print("‚è≥ –ü–æ–∫—É–ø–∫–∞ —É—Ä–æ–≤–Ω—è \(level) –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return false
                
            @unknown default:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏ —É—Ä–æ–≤–Ω—è \(level)")
                return false
            }
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: \(error.localizedDescription)"
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —É—Ä–æ–≤–Ω—è \(level): \(error)")
            return false
        }
    }
    
    // MARK: - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
    
    func restorePurchases() async {
        isLoading = true
        errorMessage = nil
        
        do {
            try await AppStore.sync()
            await loadPurchasedLevels()
            print("‚úÖ –ü–æ–∫—É–ø–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫: \(error.localizedDescription)"
            print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫: \(error)")
        }
        
        isLoading = false
    }
    
    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–æ–∫
    
    func isLevelPurchased(_ level: Int) -> Bool {
        let result = purchasedLevels.contains(level)
        print("üîç PurchaseManager: isLevelPurchased(\(level)) = \(result), purchasedLevels = \(purchasedLevels)")
        return result
    }
    
    func canPurchaseLevel(_ level: Int) -> Bool {
        return level >= 3 && level <= 4 && !isLevelPurchased(level)
    }
    
    func getProductId(for level: Int) -> String {
        return "com.Bubka.mythicstrike.level\(level)"
    }
    
    func getProduct(for level: Int) -> Product? {
        return products.first { $0.id == getProductId(for: level) }
    }
    
    // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private func loadPurchasedLevels() async {
        var purchased: Set<Int> = []
        
        for await result in Transaction.currentEntitlements {
            do {
                let transaction = try checkVerified(result)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –∫—É–ø–ª–µ–Ω
                if transaction.productID == getProductId(for: 3) {
                    purchased.insert(3)
                } else if transaction.productID == getProductId(for: 4) {
                    purchased.insert(4)
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: \(error)")
            }
        }
        
        purchasedLevels = purchased
        savePurchasedLevels()
    }
    
    private func savePurchasedLevels() {
        UserDefaults.standard.set(Array(purchasedLevels), forKey: "mythicStrikePurchasedLevels")
    }
    
    private func checkVerified<T>(_ result: VerificationResult<T>) throws -> T {
        switch result {
        case .unverified:
            throw StoreError.failedVerification
        case .verified(let safe):
            return safe
        }
    }
}

// MARK: - –û—à–∏–±–∫–∏

enum StoreError: Error, LocalizedError {
    case failedVerification
    
    var errorDescription: String? {
        switch self {
        case .failedVerification:
            return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—É–ø–∫–∏"
        }
    }
}
